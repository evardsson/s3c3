<?php
namespace s3c3\unittest;
require_once __DIR__ . '/../../BaseUnit.php';
/**
 * Test class for Model.
 * Generated by gentests.php on 2013-07-12 at 12:03:26.
 */
class ModelTest extends BaseUnit
{
    /**
     * @var \s3c3\core\Model
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // uncomment the following line to set an object to this object
        //$this->object = new \s3c3\core\Model();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


// ----- added by gentests.php on 2013-07-20 at 17:17:15 -----


    /**
     * Test function for beforeSave()
     */
    public function testBeforeSave()
    {
        // since this is not in use, this dummy test goes here
        $this->assertTrue(true);
    }

    /**
     * Test function for save()
     */
    public function testSave()
    {
        $object = new \s3c3\core\model\ConfigItem();
        $object->ckey = 'unitfoo';
        $object->cval = 'unitbar';
        $ret = $object->save();
        $this->assertTrue(is_numeric($object->id));
        $this->assertEquals($object->id, $ret);
        return $object;
    }

    /**
     * Test function for find($args, $order = false, $limit = false)
     * @depends testSave
     */
    public function testFind($object)
    {
        $res = $object->find(
            array('ckey' => array(\s3c3\core\db\Database::EQ, 'unitfoo')));
        $compare = $res[0];
        $this->assertEquals($compare->cval, $object->cval);
        $this->assertEquals($compare->ckey, $object->ckey);
        $this->assertEquals($compare->id, $object->id);
        return $object;
    }

    /**
     * Test function for findAll()
     * @depends testFind
     */
    public function testFindAll($object)
    {
        $res = $object->findAll();
        $found = false;
        foreach($res as $obj) {
            if ($obj->id == $object->id &&
                $obj->ckey == $object->ckey &&
                $obj->cval == $object->cval)
            {
                $found = true;
                break;
            }
        }
        $this->assertTrue($found);
        return $object;
    }

    /**
     * Test function for findOne($args)
     * @depends testFindAll
     */
    public function testFindOne($object)
    {
        $compare = $object->findOne(
            array('ckey' => array(\s3c3\core\db\Database::EQ, 'unitfoo')));
        $this->assertEquals($compare->cval, $object->cval);
        $this->assertEquals($compare->ckey, $object->ckey);
        $this->assertEquals($compare->id, $object->id);
        return $object;
    }

    /**
     * Test function for delete()
     * @depends testFindOne
     */
    public function testDelete($object)
    {
        $ret = $object->delete();
        $this->assertEquals($ret, 1);
        $ret2 = $object->findOne(
            array('ckey' => array(\s3c3\core\db\Database::EQ, 'unitfoo')));
        $this->assertNull($ret2);
    }

}
