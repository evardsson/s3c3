<?php
namespace s3c3\unittest;
require_once __DIR__ . '/../../../BaseUnit.php';
/**
 * Test class for Context.
 * Generated by gentests.php on 2013-07-12 at 12:03:26.
 */
class ContextTest extends BaseUnit
{
    /**
     * @var \s3c3\core\model\Context
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // uncomment the following line to set an object to this object
        //$this->object = new \s3c3\core\model\Context();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


// ----- added by gentests.php on 2013-07-20 at 17:17:15 -----


    /**
     * Test function for createContextFor($token)
     */
    public function testCreateContextFor()
    {
        $tokenexp = new \s3c3\core\Token('gold1');
        $tokenexp->createResponse(\s3c3\core\Token::TBEGIN);
        $contextx = \s3c3\core\model\Context::createContextFor($tokenexp);
        $token = new \s3c3\core\Token('polo1');
        $token->createResponse(\s3c3\core\Token::TBEGIN);
        $context = \s3c3\core\model\Context::createContextFor($token);
        $this->assertTrue(is_numeric($context->id));
        return array($token, $tokenexp);
    }

    /**
     * Test function for findContextByToken($token, $client)
     * @depends testCreateContextFor
     */
    public function testFindContextByToken($array)
    {
        list($token, $tokenexp) = $array;
        $context = \s3c3\core\model\Context::findContextByToken($token->getTokenString(), 'polo1');
        $this->assertNull($context->token);
        $this->assertTrue($context instanceof \s3c3\core\model\Context);
        return $tokenexp;
    }

    /**
     * Test function for deleteExpired()
     * @depends testFindContextByToken
     * @expectedException \s3c3\except\ObjectNotFoundException
     */
    public function testDeleteExpired($token)
    {
        sleep(\s3c3\conf\Config::getInstance()->read('token.expire') + 10);
        $context = \s3c3\core\model\Context::findContextByToken($token->getTokenString(), 'gold1');
    }


}
