<?php
namespace s3c3\unittest;
require_once __DIR__ . '/../../../BaseUnit.php';

use \s3c3\core\db\Database as DB;
/**
 * Test class for Database.
 * Generated by gentests.php on 2013-07-12 at 12:03:26.
 */
class DatabaseTest extends BaseUnit
{
    /**
     * @var \s3c3\core\db\Database
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * Test function for execute($rawSql) - put here to get DB in proper shape for all tests,
     * putting this in setUp calls it before every method
     */
    public function testDropTables()
    {
        $pre = S3C3_PREFIX;
        $pre .= !empty($pre) ? '_unit_' : 'unit_';
        $query1 = "DROP TABLE IF EXISTS {$pre}configs";
        $query2 = "DROP TABLE IF EXISTS {$pre}contexts";
        DB::execute($query1);
        DB::execute($query2);
        $this->assertTrue(true);
    }


// ----- added by gentests.php on 2013-07-20 at 17:17:15 -----


    /**
     * Test function for getDatabase($db = null, $master = true)
     * @depends testDropTables
     */
    public function testGetDatabase()
    {
        $db = DB::getDatabase();
        $this->assertTrue($db instanceof \ADOConnection);
    }

    /**
     * Test function for getSlave($db = null)
     * @depends testGetDatabase
     */
    public function testGetSlave()
    {
        $db = DB::getSlave();
        $this->assertTrue($db instanceof \ADOConnection);
    }

    /**
     * Test function for getMaster($db = null)
     * @depends testGetSlave
     */
    public function testGetMaster()
    {
        $db = DB::getMaster();
        $this->assertTrue($db instanceof \ADOConnection);
    }

    /**
     * Test function for buildTables($dbtype = 'mysql')
     * @depends testGetMaster
     */
    public function testBuildTables()
    {
        DB::buildTables();
        $pre = S3C3_PREFIX;
        $pre .= !empty($pre) ? '_unit_' : 'unit_';
        $query = "INSERT INTO {$pre}configs (ckey, cval) VALUES
            ('scheme.servers.polo', 'http://polo.local/s3c3'),
            ('scheme.servers.gold', 'http://gold.local/s3c3'),
            ('scheme.servers.mac', 'http://mac.local/s3c3'),
            ('scheme.clients.0', 'polo1'),
            ('scheme.clients.1', 'polo2'),
            ('scheme.clients.2', 'gold1'),
            ('scheme.clients.3', 'mac1');";
        DB::execute($query);
        $this->assertTrue(true);
    }

    /**
     * Test function for getAll($table, $args, $fields = array(), $order = false, $limit = false)
     * @depends testBuildTables
     */
    public function testGetAll()
    {
        $res = DB::getAll('configs', null, array('id', 'ckey', 'cval'));
        $this->assertTrue(is_array($res));
        $this->assertNotEmpty($res);
    }

    /**
     * Test function for getRow($table, $args, $fields = array(), $order = false)
     * @depends testGetAll
     */
    public function testGetRow()
    {
        $res = DB::getRow('configs',
            array('ckey' => array(DB::EQ, 'token.length')),
            array('id', 'ckey', 'cval'));
        $this->assertTrue(is_array($res));
        $this->assertTrue(array_key_exists('ckey', $res));
    }

    /**
     * Test function for getColumn($table, $args, $field, $order = false, $limit = false)
     * @depends testGetRow
     */
    public function testGetColumn()
    {
        $res = DB::getColumn('configs', null, 'ckey', false, 2);
        $this->assertTrue(is_array($res));
        $this->assertEquals(count($res), 2);
    }

    /**
     * Test function for getOne($table, $args, $field, $order = false)
     * @depends testGetColumn
     */
    public function testGetOne()
    {
        $res = DB::getOne('configs', 
            array('ckey' => array(DB::EQ, 'token.length')),
            'cval');
        $this->assertTrue(is_scalar($res));
        $this->assertEquals(64, $res);
    }

    /**
     * Test function for insert($table, $data)
     * This also sets us up (partway) for CertTest later
     * @depends testGetOne
     */
    public function testInsert()
    {
        $res = DB::insert('configs',
            array('ckey' => 'deletethis', 'cval' => 'deletable'));
        $this->assertTrue(is_numeric($res));
        return $res;
    }

    /**
     * Test function for update($table, $id, $data)
     * This also sets us up for CertTest later
     * @depends testInsert
     */
    public function testUpdate($lastId)
    {
        $data = array('cval' => 'ultradelete');
        $res = DB::update('configs', $lastId, $data);
        $this->assertTrue(is_numeric($res));
        $this->assertEquals('ultradelete',
            DB::getOne('configs',
                array('ckey'=>array(DB::EQ, 'deletethis')),
                'cval'));
        return $lastId;
    }

    /**
     * Test function for delete($table, $id)
     * @depends testUpdate
     */
    public function testDelete($delId)
    {
        $res = DB::delete('configs', $delId);
        $this->assertEquals($res, 1);
    }


// ----- added by gentests.php on 2013-07-21 at 16:23:25 -----


    /**
     * Test function for execute($rawSql)
     */
    public function testExecute()
    {
        $this->markTestIncomplete('This test has not been implemented yet.');
    }
}
