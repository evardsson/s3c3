<?php
namespace s3c3\unittest;
require_once __DIR__ . '/../../../BaseUnit.php';
/**
 * Test class for Cert.
 * Generated by gentests.php on 2013-07-20 at 17:17:15.
 */
class CertTest extends BaseUnit
{
    /**
     * @var \s3c3\core\crypto\Cert
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // uncomment the following line to set an object to this object
        //$this->object = new \s3c3\core\crypto\Cert();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    /**
     * This is a dummy test to create the cert folder and write some certs for
     * testing - ensures that the user running the test has the permissions for
     * modifying the certs.
     */
    public function testDummyCerts()
    {
        $dir = S3C3_UNIT . '/testcerts';
        if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
            $user = get_current_user();
        } else {
            $pwu_data = posix_getpwuid(posix_geteuid());
            $user = $pwu_data['name'];
        }
        if (!file_exists($dir) || !is_writable($dir))
            die("Problem! $dir does not exist or is not writable by current user $user!\n");
        $this->assertTrue(true);
    }


// ----- added by gentests.php on 2013-07-20 at 17:17:15 -----


    /**
     * Test function for scanStore($force = false)
     * @depends testDummyCerts
     */
    public function testScanStore()
    {
        $cert = new \s3c3\core\crypto\Cert();
        $this->assertTrue(is_array($cert->getKnownCertificates()));
    }

    /**
     * Test function for checkFilePermissions()
     */
    public function testCheckFilePermissions()
    {
        \s3c3\core\crypto\Cert::checkFilePermissions();
        $dir = \s3c3\conf\Config::getInstance()->read('certificate.store');
        $files = glob("$dir/*.crt");
        if (is_array($files)) foreach ($files as $file) {
            $this->assertEquals(substr(sprintf('%o', fileperms($file)), -4), '0400');
        }
        $files = glob("$dir/*.pem");
        if (is_array($files)) foreach ($files as $file) {
            $this->assertEquals(substr(sprintf('%o', fileperms($file)), -4), '0400');
        }
    }

    /**
     * Test function for getKnownCertificates()
     */
    public function testGetKnownCertificates()
    {
        $cert = new \s3c3\core\crypto\Cert();
        $list = $cert->getKnownCertificates();
        $this->assertTrue(in_array('polo', $list));
    }

    /**
     * Test function for getRoot()
     */
    public function testGetRoot()
    {
        $cert = \s3c3\core\crypto\Cert::getRoot(true);
        $this->assertTrue($cert instanceof \s3c3\core\crypto\Cert);
        return $cert;
    }

    /**
     * Test function for getCertificate()
     * @depends testGetRoot
     */
    public function testGetCertificate($cert)
    {
        $contents = file_get_contents(S3C3_UNIT . '/testcerts/s3c3_root.crt');
        $certcont = $cert->getCertificate();
        $this->assertEquals($certcont, $contents);
    }

    /**
     * Test function for getCertificateFromStore($name, $purpose = self::CLIENT,
     *  $validate = true, $isPrivate = false)
     */
    public function testGetCertificateFromStore()
    {
        $cert = \s3c3\core\crypto\Cert::getCertificateFromStore('mac1');
        $contents = file_get_contents(S3C3_UNIT . '/testcerts/mac1.crt');
        $this->assertEquals($cert, $contents);
    }

    /**
     * Test function for getCertificateFromStore($name, $purpose = self::CLIENT,
     *  $validate = true, $isPrivate = false)
     * @expectedException s3c3\except\InvalidCertificateException
     */
    public function testGetCertificateFromStoreInvalidDate()
    {
        $cert = \s3c3\core\crypto\Cert::getCertificateFromStore(
            'polo3', \s3c3\core\crypto\Cert::CLIENT, true);
    }

    /**
     * Test function for getCertificateFromStore($name, $purpose = self::CLIENT,
     *  $validate = true, $isPrivate = false)
     * @expectedException \s3c3\except\InvalidCertificateException
     */
    public function testGetCertificateFromStoreInvalidSignature()
    {
        $cert = \s3c3\core\crypto\Cert::getCertificateFromStore(
            'polo2', \s3c3\core\crypto\Cert::CLIENT, true);
    }

    /**
     * Test function for setName($name)
     */
    public function testSetName()
    {
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * Test function for setCertificate($certificate)
     */
    public function testSetCertificate()
    {
        $this->markTestIncomplete('This test has not been implemented yet.');
    }


// ----- added by gentests.php on 2013-07-21 at 16:23:25 -----


    /**
     * Test function for getLocalServerKey($asObj = false)
     */
    public function testGetLocalServerKey()
    {
        $cert = \s3c3\core\crypto\Cert::getLocalServerKey();
        $contents = file_get_contents(S3C3_UNIT . '/testcerts/polo.pem');
        $this->assertEquals($cert, $contents);
    }

    /**
     * Test function for getLocalClientKey($asObj = false)
     */
    public function testGetLocalClientKey()
    {
        $cert = \s3c3\core\crypto\Cert::getLocalClientKey();
        $contents = file_get_contents(S3C3_UNIT . '/testcerts/polo1.pem');
        $this->assertEquals($cert, $contents);
    }
}
