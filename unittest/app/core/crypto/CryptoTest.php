<?php
namespace s3c3\unittest;
require_once __DIR__ . '/../../../BaseUnit.php';
/**
 * Test class for Crypto.
 * Generated by gentests.php on 2013-07-12 at 12:03:26.
 */
class CryptoTest extends BaseUnit
{
    /**
     * @var \s3c3\core\crypto\Crypto
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // uncomment the following line to set an object to this object
        //$this->object = new \s3c3\core\crypto\Crypto();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


// ----- added by gentests.php on 2013-07-20 at 17:17:15 -----


    /**
     * Test function for setKeys($remoteName)
     */
    public function testGetSetKeys()
    {
        $crypto = new \s3c3\core\crypto\Crypto('gold', true);
        $this->assertEquals(\s3c3\core\crypto\Cert::getLocalClientKey(),
            $crypto->getLocalKey());
        $crypto->setKeys('polo');
        $contents = file_get_contents(S3C3_UNIT . '/testcerts/polo.crt');
        $this->assertEquals($contents,
            $crypto->getRemoteKey());
        return $crypto;
    }

    /**
     * Test function for encryptLocal($message)
     * @depends testGetSetKeys
     */
    public function testEncryptLocal($crypto)
    {
        $string = "UNITTEST test string";
        $crypted = $crypto->encryptLocal($string);
        $this->assertNotEquals($string, $crypted);
        $cryptoRemote = new \s3c3\core\crypto\Crypto('polo1');
        return array($string, $crypted, $crypto, $cryptoRemote);
    }

    /**
     * Test function for decryptRemote($message)
     * @depends testEncryptLocal
     */
    public function testDecryptRemote($carray)
    {
        list ($string, $crypted, $crypto, $cryptoRemote) = $carray;
        $decrypted = $cryptoRemote->decryptRemote($crypted);
        $this->assertEquals($string, $decrypted);
        return array($string, $crypto, $cryptoRemote);
    }

    /**
     * Test function for encryptRemote($message)
     * @depends testDecryptRemote
     */
    public function testEncryptRemote($carray)
    {
        list ($string, $crypto, $cryptoRemote) = $carray;
        $crypted = $cryptoRemote->encryptRemote($string);
        $this->assertNotEquals($string, $crypted);
        return array($string, $crypted, $crypto, $cryptoRemote);
    }

    /**
     * Test function for decryptLocal($message)
     * @depends testEncryptRemote
     */
    public function testDecryptLocal($carray)
    {
        list ($string, $crypted, $crypto, $cryptoRemote) = $carray;
        $decrypted = $crypto->decryptLocal($crypted);
        $this->assertEquals($string, $decrypted);
        return array($string, $crypto, $cryptoRemote);
    }

    /**
     * Test function for createHash($message, $token)
     * @depends testDecryptLocal
     */
    public function testCreateHash($carray)
    {
        list ($string, $crypto, $cryptoRemote) = $carray;
        $token = 'continue:aslKJAS)9QI#OIKMF"F(I)Q kmrx;oir0(IOWIJF;oi8u240[p9j:polo1';
        $cryptedHash = $cryptoRemote->createHash($string, $token);
        $hash = hash('sha256', $string.$token);
        $this->assertNotEquals($cryptedHash, $hash);
        return array($cryptedHash, $string, $token, $crypto, $cryptoRemote);
    }

    /**
     * Test function for verifyHash($hash, $message, $token)
     * @depends testCreateHash
     */
    public function testVerifyHash($carray)
    {
        list($cryptedHash, $string, $token, $crypto, $cryptoRemote) = $carray;
        $ok = $crypto->verifyHash($cryptedHash, $string, $token);
        $this->assertTrue($ok);
    }

}
