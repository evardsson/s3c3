<?php
namespace s3c3\unittest;
require_once __DIR__ . '/../../BaseUnit.php';
/**
 * Test class for Config.
 * Generated by gentests.php on 2013-07-12 at 12:03:26.
 */
class ConfigTest extends BaseUnit
{
    /**
     * @var \s3c3\conf\Config
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        // uncomment the following line to set an object to this object
        //$this->object = new \s3c3\conf\Config();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }


// ----- added by gentests.php on 2013-07-20 at 17:17:15 -----


    /**
     * Test function for getInstance()
     */
    public function testGetInstance()
    {
        $conf = \s3c3\conf\Config::getInstance();
        $this->assertTrue($conf instanceof \s3c3\conf\Config);
        return $conf;
    }

    /**
     * Test function for exists($key)
     * @depends testGetInstance
     */
    public function testExists($conf)
    {
        $existing = 'token.expire';
        $nonexisting = 'token.explode';
        $this->assertTrue($conf->exists($existing));
        $this->assertFalse($conf->exists($nonexisting));
        return $conf;
    }

    /**
     * Test function for read($key = null)
     * @depends testExists
     */
    public function testRead($conf)
    {
        $this->assertTrue(is_scalar($conf->read('token.expire')));
        $this->assertTrue(is_array($conf->read('token')));
        return $conf;
    }

    /**
     * Test function for write($key, $value)
     * @depends testRead
     */
    public function testWrite($conf)
    {
        $conf->write('unittest', array('test1'=>'polo', 'test2'=>'gold', 'test3'=>'mac'));
        $this->assertEquals($conf->read('unittest.test3'), 'mac');
        $this->assertTrue(is_array($conf->read('unittest')));
        $conf->write('certificate', array('store' => S3C3_UNIT . '/testcerts', 'validate' => true));
        $conf->write('token.expire', 5);
        return $conf;
    }

    /**
     * Test function for delete($key = null)
     * @depends testWrite
     */
    public function testDelete($conf)
    {
        $conf->delete('unittest');
        $this->assertFalse($conf->exists('unittest'));
    }

    /**
     * Test function for writeFromYaml()
     */
    public function testWriteFromYaml()
    {
        $this->assertTrue(defined('S3C3_PREFIX'));
    }
}
